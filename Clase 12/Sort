Sort = Ordenar elementos según un orden. Ya sea de mayor a menor, 
de menor a mayor, de pares a impares, etc...

Por ejemplo:
int v[] = {3, 4, 10, 2, 5, 9, 1}

sort(v.begin(), v.end());

v[] = {1, 2, 3, 4, 5, 9, 10}


¿Entonces cómo hace esto c++?
Con un algoritmo hibrido llamado Introsort. Que es una combinación
de otros tres algoritmos de sort; Quicksort, Heapsort and Insertion Sort.
Y eso le da una complejidad de O(n log n) al momento de usar sort() en c++.

Existen muchooos algoritmos de ordenación. Pero por ahora les mostraré unos 
pocos.

Pero primero hagamos el ejercicio mental de pensar: ¿Cómo ordenaría en la vida
real?
Si tuvieramos 12 cartas enumeradas del 1 al 12 y están desordenadas. ¿Cómo las 
ordenarían?
















Como somos humanos y no robots, ya sabemos cómo es el orden...
1, 2, 3, ..., 12

Ahora, y si no supiesemos que van del 1 al 12. Y tuvieramos que leer una carta por carta.

Ahora, lo que se nos puede ocurrir es ordenar la carta que estemos leyendo.

Primero veamos que si v[i]>v[i+1], entonces debemos hacer swap(v[i], v[i+1]).

Bubble sort:
Hagamos muchos swap. La idea de Bubble Sort es ir comparando de a pares consecutivos por todo el arreglo
y eso una cantidad n de veces.

V []= {2, 1, 4, 3}.

{2, 1, 4, 3} -> { 1, 2, 4, 3} -> {1, 2, 4, 3}  -> {1, 2, 3, 4} YEAH(Esta vez resultó a la primera vuelta)
 -  -                -  -               -  -

V []= {4, 3, 2, 1}.

{4, 3, 2, 1} -> {3, 4, 2, 1} -> {3, 2, 4, 1} -> {3, 2, 1, 4} Tenemos que hacer otra vuelta...
 -  -               -  -               -  -            

{3, 2, 1, 4} -> {2, 3, 1, 4} -> {2, 1, 3, 4} -> {2, 1, 3, 4} Tenemos que hacer otra vuelta...
 -  -               -  -               -  -

{2, 1, 3, 4} -> {1, 2, 3, 4} -> {1, 2, 3, 4} -> {1, 2, 3, 4} Yeah, lo Tenemos...
 -  -               -  -               -  -




El dódigo se vería tal que así:

for (int i = 0; i < n; i++) {
    for (int j = 0; j < n-1; j++) {
        if (v[j] > v[j+1]) {
            swap(v[j], v[j+1]);
        }
    }
}



Insertion Sort:
Ir revisando si el elemento i es mayor que el elemento siguiente, si esto pasa swap(). Y hacemos esto recorriendo linealmente.

v = {3, 4, 10, 2, 5, 9, 1}

3.
3, 4.
3, 4, 10.
3, 4, 10, 2 x ... -> 2, 3, 4, 10.
2, 3, 4, 10, 5 x ... -> 2, 3, 4, 5, 10.
2, 3, 4, 5, 10, 9 x ... ->2, 3, 4, 5, 9, 10.


Esta es la idea intuitiva de Insertion Sort. Ir revisando elemento por elemento y si el elemento
a su izquierda es mayor que este, y permutar.
El código se vería tal que así:

int i, key, j;  
for (i = 1; i < n; i++){  
    key = v[i];  
    j = i - 1;  
    while (j >= 0 and v[j] > key){  
        v[j + 1] = v[j];
        j = j - 1;  
    }  
    v[j + 1] = key; 
}  